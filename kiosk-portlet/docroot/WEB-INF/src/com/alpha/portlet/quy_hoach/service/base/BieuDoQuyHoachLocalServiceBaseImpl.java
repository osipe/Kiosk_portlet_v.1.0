/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.alpha.portlet.quy_hoach.service.base;

import com.alpha.portlet.quy_hoach.model.BieuDoQuyHoach;
import com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachLocalService;
import com.alpha.portlet.quy_hoach.service.persistence.BieuDoQuyHoachFinder;
import com.alpha.portlet.quy_hoach.service.persistence.BieuDoQuyHoachPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the bieu do quy hoach local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.alpha.portlet.quy_hoach.service.impl.BieuDoQuyHoachLocalServiceImpl}.
 * </p>
 *
 * @author annn
 * @see com.alpha.portlet.quy_hoach.service.impl.BieuDoQuyHoachLocalServiceImpl
 * @see com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachLocalServiceUtil
 * @generated
 */
public abstract class BieuDoQuyHoachLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements BieuDoQuyHoachLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachLocalServiceUtil} to access the bieu do quy hoach local service.
	 */

	/**
	 * Adds the bieu do quy hoach to the database. Also notifies the appropriate model listeners.
	 *
	 * @param bieuDoQuyHoach the bieu do quy hoach
	 * @return the bieu do quy hoach that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BieuDoQuyHoach addBieuDoQuyHoach(BieuDoQuyHoach bieuDoQuyHoach)
		throws SystemException {
		bieuDoQuyHoach.setNew(true);

		return bieuDoQuyHoachPersistence.update(bieuDoQuyHoach);
	}

	/**
	 * Creates a new bieu do quy hoach with the primary key. Does not add the bieu do quy hoach to the database.
	 *
	 * @param bieuDoQuyHoachId the primary key for the new bieu do quy hoach
	 * @return the new bieu do quy hoach
	 */
	@Override
	public BieuDoQuyHoach createBieuDoQuyHoach(long bieuDoQuyHoachId) {
		return bieuDoQuyHoachPersistence.create(bieuDoQuyHoachId);
	}

	/**
	 * Deletes the bieu do quy hoach with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param bieuDoQuyHoachId the primary key of the bieu do quy hoach
	 * @return the bieu do quy hoach that was removed
	 * @throws PortalException if a bieu do quy hoach with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BieuDoQuyHoach deleteBieuDoQuyHoach(long bieuDoQuyHoachId)
		throws PortalException, SystemException {
		return bieuDoQuyHoachPersistence.remove(bieuDoQuyHoachId);
	}

	/**
	 * Deletes the bieu do quy hoach from the database. Also notifies the appropriate model listeners.
	 *
	 * @param bieuDoQuyHoach the bieu do quy hoach
	 * @return the bieu do quy hoach that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public BieuDoQuyHoach deleteBieuDoQuyHoach(BieuDoQuyHoach bieuDoQuyHoach)
		throws SystemException {
		return bieuDoQuyHoachPersistence.remove(bieuDoQuyHoach);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(BieuDoQuyHoach.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return bieuDoQuyHoachPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.alpha.portlet.quy_hoach.model.impl.BieuDoQuyHoachModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return bieuDoQuyHoachPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.alpha.portlet.quy_hoach.model.impl.BieuDoQuyHoachModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return bieuDoQuyHoachPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return bieuDoQuyHoachPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return bieuDoQuyHoachPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public BieuDoQuyHoach fetchBieuDoQuyHoach(long bieuDoQuyHoachId)
		throws SystemException {
		return bieuDoQuyHoachPersistence.fetchByPrimaryKey(bieuDoQuyHoachId);
	}

	/**
	 * Returns the bieu do quy hoach with the primary key.
	 *
	 * @param bieuDoQuyHoachId the primary key of the bieu do quy hoach
	 * @return the bieu do quy hoach
	 * @throws PortalException if a bieu do quy hoach with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public BieuDoQuyHoach getBieuDoQuyHoach(long bieuDoQuyHoachId)
		throws PortalException, SystemException {
		return bieuDoQuyHoachPersistence.findByPrimaryKey(bieuDoQuyHoachId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return bieuDoQuyHoachPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the bieu do quy hoachs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.alpha.portlet.quy_hoach.model.impl.BieuDoQuyHoachModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of bieu do quy hoachs
	 * @param end the upper bound of the range of bieu do quy hoachs (not inclusive)
	 * @return the range of bieu do quy hoachs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<BieuDoQuyHoach> getBieuDoQuyHoachs(int start, int end)
		throws SystemException {
		return bieuDoQuyHoachPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of bieu do quy hoachs.
	 *
	 * @return the number of bieu do quy hoachs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getBieuDoQuyHoachsCount() throws SystemException {
		return bieuDoQuyHoachPersistence.countAll();
	}

	/**
	 * Updates the bieu do quy hoach in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param bieuDoQuyHoach the bieu do quy hoach
	 * @return the bieu do quy hoach that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public BieuDoQuyHoach updateBieuDoQuyHoach(BieuDoQuyHoach bieuDoQuyHoach)
		throws SystemException {
		return bieuDoQuyHoachPersistence.update(bieuDoQuyHoach);
	}

	/**
	 * Returns the bieu do quy hoach local service.
	 *
	 * @return the bieu do quy hoach local service
	 */
	public com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachLocalService getBieuDoQuyHoachLocalService() {
		return bieuDoQuyHoachLocalService;
	}

	/**
	 * Sets the bieu do quy hoach local service.
	 *
	 * @param bieuDoQuyHoachLocalService the bieu do quy hoach local service
	 */
	public void setBieuDoQuyHoachLocalService(
		com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachLocalService bieuDoQuyHoachLocalService) {
		this.bieuDoQuyHoachLocalService = bieuDoQuyHoachLocalService;
	}

	/**
	 * Returns the bieu do quy hoach remote service.
	 *
	 * @return the bieu do quy hoach remote service
	 */
	public com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachService getBieuDoQuyHoachService() {
		return bieuDoQuyHoachService;
	}

	/**
	 * Sets the bieu do quy hoach remote service.
	 *
	 * @param bieuDoQuyHoachService the bieu do quy hoach remote service
	 */
	public void setBieuDoQuyHoachService(
		com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachService bieuDoQuyHoachService) {
		this.bieuDoQuyHoachService = bieuDoQuyHoachService;
	}

	/**
	 * Returns the bieu do quy hoach persistence.
	 *
	 * @return the bieu do quy hoach persistence
	 */
	public BieuDoQuyHoachPersistence getBieuDoQuyHoachPersistence() {
		return bieuDoQuyHoachPersistence;
	}

	/**
	 * Sets the bieu do quy hoach persistence.
	 *
	 * @param bieuDoQuyHoachPersistence the bieu do quy hoach persistence
	 */
	public void setBieuDoQuyHoachPersistence(
		BieuDoQuyHoachPersistence bieuDoQuyHoachPersistence) {
		this.bieuDoQuyHoachPersistence = bieuDoQuyHoachPersistence;
	}

	/**
	 * Returns the bieu do quy hoach finder.
	 *
	 * @return the bieu do quy hoach finder
	 */
	public BieuDoQuyHoachFinder getBieuDoQuyHoachFinder() {
		return bieuDoQuyHoachFinder;
	}

	/**
	 * Sets the bieu do quy hoach finder.
	 *
	 * @param bieuDoQuyHoachFinder the bieu do quy hoach finder
	 */
	public void setBieuDoQuyHoachFinder(
		BieuDoQuyHoachFinder bieuDoQuyHoachFinder) {
		this.bieuDoQuyHoachFinder = bieuDoQuyHoachFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.alpha.portlet.quy_hoach.model.BieuDoQuyHoach",
			bieuDoQuyHoachLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.alpha.portlet.quy_hoach.model.BieuDoQuyHoach");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return BieuDoQuyHoach.class;
	}

	protected String getModelClassName() {
		return BieuDoQuyHoach.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = bieuDoQuyHoachPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachLocalService.class)
	protected com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachLocalService bieuDoQuyHoachLocalService;
	@BeanReference(type = com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachService.class)
	protected com.alpha.portlet.quy_hoach.service.BieuDoQuyHoachService bieuDoQuyHoachService;
	@BeanReference(type = BieuDoQuyHoachPersistence.class)
	protected BieuDoQuyHoachPersistence bieuDoQuyHoachPersistence;
	@BeanReference(type = BieuDoQuyHoachFinder.class)
	protected BieuDoQuyHoachFinder bieuDoQuyHoachFinder;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private BieuDoQuyHoachLocalServiceClpInvoker _clpInvoker = new BieuDoQuyHoachLocalServiceClpInvoker();
}