/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.alpha.portlet.danh_gia_hai_long.service.base;

import com.alpha.portlet.danh_gia_hai_long.model.TraLoi;
import com.alpha.portlet.danh_gia_hai_long.service.TraLoiLocalService;
import com.alpha.portlet.danh_gia_hai_long.service.persistence.CauHoiFinder;
import com.alpha.portlet.danh_gia_hai_long.service.persistence.CauHoiPersistence;
import com.alpha.portlet.danh_gia_hai_long.service.persistence.DanhGiaHaiLongPersistence;
import com.alpha.portlet.danh_gia_hai_long.service.persistence.TraLoiPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the tra loi local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.alpha.portlet.danh_gia_hai_long.service.impl.TraLoiLocalServiceImpl}.
 * </p>
 *
 * @author darkn
 * @see com.alpha.portlet.danh_gia_hai_long.service.impl.TraLoiLocalServiceImpl
 * @see com.alpha.portlet.danh_gia_hai_long.service.TraLoiLocalServiceUtil
 * @generated
 */
public abstract class TraLoiLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements TraLoiLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.alpha.portlet.danh_gia_hai_long.service.TraLoiLocalServiceUtil} to access the tra loi local service.
	 */

	/**
	 * Adds the tra loi to the database. Also notifies the appropriate model listeners.
	 *
	 * @param traLoi the tra loi
	 * @return the tra loi that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TraLoi addTraLoi(TraLoi traLoi) throws SystemException {
		traLoi.setNew(true);

		return traLoiPersistence.update(traLoi);
	}

	/**
	 * Creates a new tra loi with the primary key. Does not add the tra loi to the database.
	 *
	 * @param traLoiId the primary key for the new tra loi
	 * @return the new tra loi
	 */
	@Override
	public TraLoi createTraLoi(long traLoiId) {
		return traLoiPersistence.create(traLoiId);
	}

	/**
	 * Deletes the tra loi with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param traLoiId the primary key of the tra loi
	 * @return the tra loi that was removed
	 * @throws PortalException if a tra loi with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TraLoi deleteTraLoi(long traLoiId)
		throws PortalException, SystemException {
		return traLoiPersistence.remove(traLoiId);
	}

	/**
	 * Deletes the tra loi from the database. Also notifies the appropriate model listeners.
	 *
	 * @param traLoi the tra loi
	 * @return the tra loi that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TraLoi deleteTraLoi(TraLoi traLoi) throws SystemException {
		return traLoiPersistence.remove(traLoi);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TraLoi.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return traLoiPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.alpha.portlet.danh_gia_hai_long.model.impl.TraLoiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return traLoiPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.alpha.portlet.danh_gia_hai_long.model.impl.TraLoiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return traLoiPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return traLoiPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return traLoiPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public TraLoi fetchTraLoi(long traLoiId) throws SystemException {
		return traLoiPersistence.fetchByPrimaryKey(traLoiId);
	}

	/**
	 * Returns the tra loi with the primary key.
	 *
	 * @param traLoiId the primary key of the tra loi
	 * @return the tra loi
	 * @throws PortalException if a tra loi with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public TraLoi getTraLoi(long traLoiId)
		throws PortalException, SystemException {
		return traLoiPersistence.findByPrimaryKey(traLoiId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return traLoiPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the tra lois.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.alpha.portlet.danh_gia_hai_long.model.impl.TraLoiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of tra lois
	 * @param end the upper bound of the range of tra lois (not inclusive)
	 * @return the range of tra lois
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<TraLoi> getTraLois(int start, int end)
		throws SystemException {
		return traLoiPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of tra lois.
	 *
	 * @return the number of tra lois
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getTraLoisCount() throws SystemException {
		return traLoiPersistence.countAll();
	}

	/**
	 * Updates the tra loi in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param traLoi the tra loi
	 * @return the tra loi that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TraLoi updateTraLoi(TraLoi traLoi) throws SystemException {
		return traLoiPersistence.update(traLoi);
	}

	/**
	 * Returns the cau hoi local service.
	 *
	 * @return the cau hoi local service
	 */
	public com.alpha.portlet.danh_gia_hai_long.service.CauHoiLocalService getCauHoiLocalService() {
		return cauHoiLocalService;
	}

	/**
	 * Sets the cau hoi local service.
	 *
	 * @param cauHoiLocalService the cau hoi local service
	 */
	public void setCauHoiLocalService(
		com.alpha.portlet.danh_gia_hai_long.service.CauHoiLocalService cauHoiLocalService) {
		this.cauHoiLocalService = cauHoiLocalService;
	}

	/**
	 * Returns the cau hoi remote service.
	 *
	 * @return the cau hoi remote service
	 */
	public com.alpha.portlet.danh_gia_hai_long.service.CauHoiService getCauHoiService() {
		return cauHoiService;
	}

	/**
	 * Sets the cau hoi remote service.
	 *
	 * @param cauHoiService the cau hoi remote service
	 */
	public void setCauHoiService(
		com.alpha.portlet.danh_gia_hai_long.service.CauHoiService cauHoiService) {
		this.cauHoiService = cauHoiService;
	}

	/**
	 * Returns the cau hoi persistence.
	 *
	 * @return the cau hoi persistence
	 */
	public CauHoiPersistence getCauHoiPersistence() {
		return cauHoiPersistence;
	}

	/**
	 * Sets the cau hoi persistence.
	 *
	 * @param cauHoiPersistence the cau hoi persistence
	 */
	public void setCauHoiPersistence(CauHoiPersistence cauHoiPersistence) {
		this.cauHoiPersistence = cauHoiPersistence;
	}

	/**
	 * Returns the cau hoi finder.
	 *
	 * @return the cau hoi finder
	 */
	public CauHoiFinder getCauHoiFinder() {
		return cauHoiFinder;
	}

	/**
	 * Sets the cau hoi finder.
	 *
	 * @param cauHoiFinder the cau hoi finder
	 */
	public void setCauHoiFinder(CauHoiFinder cauHoiFinder) {
		this.cauHoiFinder = cauHoiFinder;
	}

	/**
	 * Returns the danh gia hai long local service.
	 *
	 * @return the danh gia hai long local service
	 */
	public com.alpha.portlet.danh_gia_hai_long.service.DanhGiaHaiLongLocalService getDanhGiaHaiLongLocalService() {
		return danhGiaHaiLongLocalService;
	}

	/**
	 * Sets the danh gia hai long local service.
	 *
	 * @param danhGiaHaiLongLocalService the danh gia hai long local service
	 */
	public void setDanhGiaHaiLongLocalService(
		com.alpha.portlet.danh_gia_hai_long.service.DanhGiaHaiLongLocalService danhGiaHaiLongLocalService) {
		this.danhGiaHaiLongLocalService = danhGiaHaiLongLocalService;
	}

	/**
	 * Returns the danh gia hai long remote service.
	 *
	 * @return the danh gia hai long remote service
	 */
	public com.alpha.portlet.danh_gia_hai_long.service.DanhGiaHaiLongService getDanhGiaHaiLongService() {
		return danhGiaHaiLongService;
	}

	/**
	 * Sets the danh gia hai long remote service.
	 *
	 * @param danhGiaHaiLongService the danh gia hai long remote service
	 */
	public void setDanhGiaHaiLongService(
		com.alpha.portlet.danh_gia_hai_long.service.DanhGiaHaiLongService danhGiaHaiLongService) {
		this.danhGiaHaiLongService = danhGiaHaiLongService;
	}

	/**
	 * Returns the danh gia hai long persistence.
	 *
	 * @return the danh gia hai long persistence
	 */
	public DanhGiaHaiLongPersistence getDanhGiaHaiLongPersistence() {
		return danhGiaHaiLongPersistence;
	}

	/**
	 * Sets the danh gia hai long persistence.
	 *
	 * @param danhGiaHaiLongPersistence the danh gia hai long persistence
	 */
	public void setDanhGiaHaiLongPersistence(
		DanhGiaHaiLongPersistence danhGiaHaiLongPersistence) {
		this.danhGiaHaiLongPersistence = danhGiaHaiLongPersistence;
	}

	/**
	 * Returns the tra loi local service.
	 *
	 * @return the tra loi local service
	 */
	public com.alpha.portlet.danh_gia_hai_long.service.TraLoiLocalService getTraLoiLocalService() {
		return traLoiLocalService;
	}

	/**
	 * Sets the tra loi local service.
	 *
	 * @param traLoiLocalService the tra loi local service
	 */
	public void setTraLoiLocalService(
		com.alpha.portlet.danh_gia_hai_long.service.TraLoiLocalService traLoiLocalService) {
		this.traLoiLocalService = traLoiLocalService;
	}

	/**
	 * Returns the tra loi remote service.
	 *
	 * @return the tra loi remote service
	 */
	public com.alpha.portlet.danh_gia_hai_long.service.TraLoiService getTraLoiService() {
		return traLoiService;
	}

	/**
	 * Sets the tra loi remote service.
	 *
	 * @param traLoiService the tra loi remote service
	 */
	public void setTraLoiService(
		com.alpha.portlet.danh_gia_hai_long.service.TraLoiService traLoiService) {
		this.traLoiService = traLoiService;
	}

	/**
	 * Returns the tra loi persistence.
	 *
	 * @return the tra loi persistence
	 */
	public TraLoiPersistence getTraLoiPersistence() {
		return traLoiPersistence;
	}

	/**
	 * Sets the tra loi persistence.
	 *
	 * @param traLoiPersistence the tra loi persistence
	 */
	public void setTraLoiPersistence(TraLoiPersistence traLoiPersistence) {
		this.traLoiPersistence = traLoiPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.alpha.portlet.danh_gia_hai_long.model.TraLoi",
			traLoiLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.alpha.portlet.danh_gia_hai_long.model.TraLoi");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return TraLoi.class;
	}

	protected String getModelClassName() {
		return TraLoi.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = traLoiPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.alpha.portlet.danh_gia_hai_long.service.CauHoiLocalService.class)
	protected com.alpha.portlet.danh_gia_hai_long.service.CauHoiLocalService cauHoiLocalService;
	@BeanReference(type = com.alpha.portlet.danh_gia_hai_long.service.CauHoiService.class)
	protected com.alpha.portlet.danh_gia_hai_long.service.CauHoiService cauHoiService;
	@BeanReference(type = CauHoiPersistence.class)
	protected CauHoiPersistence cauHoiPersistence;
	@BeanReference(type = CauHoiFinder.class)
	protected CauHoiFinder cauHoiFinder;
	@BeanReference(type = com.alpha.portlet.danh_gia_hai_long.service.DanhGiaHaiLongLocalService.class)
	protected com.alpha.portlet.danh_gia_hai_long.service.DanhGiaHaiLongLocalService danhGiaHaiLongLocalService;
	@BeanReference(type = com.alpha.portlet.danh_gia_hai_long.service.DanhGiaHaiLongService.class)
	protected com.alpha.portlet.danh_gia_hai_long.service.DanhGiaHaiLongService danhGiaHaiLongService;
	@BeanReference(type = DanhGiaHaiLongPersistence.class)
	protected DanhGiaHaiLongPersistence danhGiaHaiLongPersistence;
	@BeanReference(type = com.alpha.portlet.danh_gia_hai_long.service.TraLoiLocalService.class)
	protected com.alpha.portlet.danh_gia_hai_long.service.TraLoiLocalService traLoiLocalService;
	@BeanReference(type = com.alpha.portlet.danh_gia_hai_long.service.TraLoiService.class)
	protected com.alpha.portlet.danh_gia_hai_long.service.TraLoiService traLoiService;
	@BeanReference(type = TraLoiPersistence.class)
	protected TraLoiPersistence traLoiPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private TraLoiLocalServiceClpInvoker _clpInvoker = new TraLoiLocalServiceClpInvoker();
}